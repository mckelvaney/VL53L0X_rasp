# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rpi_vl53l0x')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rpi_vl53l0x')
    _rpi_vl53l0x = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rpi_vl53l0x', [dirname(__file__)])
        except ImportError:
            import _rpi_vl53l0x
            return _rpi_vl53l0x
        if fp is not None:
            try:
                _mod = imp.load_module('_rpi_vl53l0x', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rpi_vl53l0x = swig_import_helper()
    del swig_import_helper
else:
    import _rpi_vl53l0x
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class uint8_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint8_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint8_t, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _rpi_vl53l0x.new_uint8_t(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_uint8_t
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _rpi_vl53l0x.uint8_t___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rpi_vl53l0x.uint8_t___setitem__(self, index, value)

    def cast(self):
        return _rpi_vl53l0x.uint8_t_cast(self)
    if _newclass:
        frompointer = staticmethod(_rpi_vl53l0x.uint8_t_frompointer)
    else:
        frompointer = _rpi_vl53l0x.uint8_t_frompointer
uint8_t_swigregister = _rpi_vl53l0x.uint8_t_swigregister
uint8_t_swigregister(uint8_t)

def uint8_t_frompointer(t):
    return _rpi_vl53l0x.uint8_t_frompointer(t)
uint8_t_frompointer = _rpi_vl53l0x.uint8_t_frompointer

class uint32_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32_t, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _rpi_vl53l0x.new_uint32_t(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_uint32_t
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _rpi_vl53l0x.uint32_t___getitem__(self, index)

    def __setitem__(self, index, value):
        return _rpi_vl53l0x.uint32_t___setitem__(self, index, value)

    def cast(self):
        return _rpi_vl53l0x.uint32_t_cast(self)
    if _newclass:
        frompointer = staticmethod(_rpi_vl53l0x.uint32_t_frompointer)
    else:
        frompointer = _rpi_vl53l0x.uint32_t_frompointer
uint32_t_swigregister = _rpi_vl53l0x.uint32_t_swigregister
uint32_t_swigregister(uint32_t)

def uint32_t_frompointer(t):
    return _rpi_vl53l0x.uint32_t_frompointer(t)
uint32_t_frompointer = _rpi_vl53l0x.uint32_t_frompointer


def VL53L0X_GetVersion(pVersion):
    return _rpi_vl53l0x.VL53L0X_GetVersion(pVersion)
VL53L0X_GetVersion = _rpi_vl53l0x.VL53L0X_GetVersion

def VL53L0X_GetPalSpecVersion(pPalSpecVersion):
    return _rpi_vl53l0x.VL53L0X_GetPalSpecVersion(pPalSpecVersion)
VL53L0X_GetPalSpecVersion = _rpi_vl53l0x.VL53L0X_GetPalSpecVersion

def VL53L0X_GetProductRevision(Dev, pProductRevisionMajor, pProductRevisionMinor):
    return _rpi_vl53l0x.VL53L0X_GetProductRevision(Dev, pProductRevisionMajor, pProductRevisionMinor)
VL53L0X_GetProductRevision = _rpi_vl53l0x.VL53L0X_GetProductRevision

def VL53L0X_GetDeviceInfo(Dev, pVL53L0X_DeviceInfo):
    return _rpi_vl53l0x.VL53L0X_GetDeviceInfo(Dev, pVL53L0X_DeviceInfo)
VL53L0X_GetDeviceInfo = _rpi_vl53l0x.VL53L0X_GetDeviceInfo

def VL53L0X_GetDeviceErrorStatus(Dev, pDeviceErrorStatus):
    return _rpi_vl53l0x.VL53L0X_GetDeviceErrorStatus(Dev, pDeviceErrorStatus)
VL53L0X_GetDeviceErrorStatus = _rpi_vl53l0x.VL53L0X_GetDeviceErrorStatus

def VL53L0X_GetRangeStatusString(RangeStatus, pRangeStatusString):
    return _rpi_vl53l0x.VL53L0X_GetRangeStatusString(RangeStatus, pRangeStatusString)
VL53L0X_GetRangeStatusString = _rpi_vl53l0x.VL53L0X_GetRangeStatusString

def VL53L0X_GetDeviceErrorString(ErrorCode, pDeviceErrorString):
    return _rpi_vl53l0x.VL53L0X_GetDeviceErrorString(ErrorCode, pDeviceErrorString)
VL53L0X_GetDeviceErrorString = _rpi_vl53l0x.VL53L0X_GetDeviceErrorString

def VL53L0X_GetPalErrorString(PalErrorCode, pPalErrorString):
    return _rpi_vl53l0x.VL53L0X_GetPalErrorString(PalErrorCode, pPalErrorString)
VL53L0X_GetPalErrorString = _rpi_vl53l0x.VL53L0X_GetPalErrorString

def VL53L0X_GetPalStateString(PalStateCode, pPalStateString):
    return _rpi_vl53l0x.VL53L0X_GetPalStateString(PalStateCode, pPalStateString)
VL53L0X_GetPalStateString = _rpi_vl53l0x.VL53L0X_GetPalStateString

def VL53L0X_GetPalState(Dev, pPalState):
    return _rpi_vl53l0x.VL53L0X_GetPalState(Dev, pPalState)
VL53L0X_GetPalState = _rpi_vl53l0x.VL53L0X_GetPalState

def VL53L0X_SetPowerMode(Dev, PowerMode):
    return _rpi_vl53l0x.VL53L0X_SetPowerMode(Dev, PowerMode)
VL53L0X_SetPowerMode = _rpi_vl53l0x.VL53L0X_SetPowerMode

def VL53L0X_GetPowerMode(Dev, pPowerMode):
    return _rpi_vl53l0x.VL53L0X_GetPowerMode(Dev, pPowerMode)
VL53L0X_GetPowerMode = _rpi_vl53l0x.VL53L0X_GetPowerMode

def VL53L0X_SetOffsetCalibrationDataMicroMeter(Dev, OffsetCalibrationDataMicroMeter):
    return _rpi_vl53l0x.VL53L0X_SetOffsetCalibrationDataMicroMeter(Dev, OffsetCalibrationDataMicroMeter)
VL53L0X_SetOffsetCalibrationDataMicroMeter = _rpi_vl53l0x.VL53L0X_SetOffsetCalibrationDataMicroMeter

def VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev, pOffsetCalibrationDataMicroMeter):
    return _rpi_vl53l0x.VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev, pOffsetCalibrationDataMicroMeter)
VL53L0X_GetOffsetCalibrationDataMicroMeter = _rpi_vl53l0x.VL53L0X_GetOffsetCalibrationDataMicroMeter

def VL53L0X_SetLinearityCorrectiveGain(Dev, LinearityCorrectiveGain):
    return _rpi_vl53l0x.VL53L0X_SetLinearityCorrectiveGain(Dev, LinearityCorrectiveGain)
VL53L0X_SetLinearityCorrectiveGain = _rpi_vl53l0x.VL53L0X_SetLinearityCorrectiveGain

def VL53L0X_GetLinearityCorrectiveGain(Dev, pLinearityCorrectiveGain):
    return _rpi_vl53l0x.VL53L0X_GetLinearityCorrectiveGain(Dev, pLinearityCorrectiveGain)
VL53L0X_GetLinearityCorrectiveGain = _rpi_vl53l0x.VL53L0X_GetLinearityCorrectiveGain

def VL53L0X_SetGroupParamHold(Dev, GroupParamHold):
    return _rpi_vl53l0x.VL53L0X_SetGroupParamHold(Dev, GroupParamHold)
VL53L0X_SetGroupParamHold = _rpi_vl53l0x.VL53L0X_SetGroupParamHold

def VL53L0X_GetUpperLimitMilliMeter(Dev, pUpperLimitMilliMeter):
    return _rpi_vl53l0x.VL53L0X_GetUpperLimitMilliMeter(Dev, pUpperLimitMilliMeter)
VL53L0X_GetUpperLimitMilliMeter = _rpi_vl53l0x.VL53L0X_GetUpperLimitMilliMeter

def VL53L0X_GetTotalSignalRate(Dev, pTotalSignalRate):
    return _rpi_vl53l0x.VL53L0X_GetTotalSignalRate(Dev, pTotalSignalRate)
VL53L0X_GetTotalSignalRate = _rpi_vl53l0x.VL53L0X_GetTotalSignalRate

def VL53L0X_SetDeviceAddress(Dev, DeviceAddress):
    return _rpi_vl53l0x.VL53L0X_SetDeviceAddress(Dev, DeviceAddress)
VL53L0X_SetDeviceAddress = _rpi_vl53l0x.VL53L0X_SetDeviceAddress

def VL53L0X_DataInit(Dev):
    return _rpi_vl53l0x.VL53L0X_DataInit(Dev)
VL53L0X_DataInit = _rpi_vl53l0x.VL53L0X_DataInit

def VL53L0X_SetTuningSettingBuffer(Dev, pTuningSettingBuffer, UseInternalTuningSettings):
    return _rpi_vl53l0x.VL53L0X_SetTuningSettingBuffer(Dev, pTuningSettingBuffer, UseInternalTuningSettings)
VL53L0X_SetTuningSettingBuffer = _rpi_vl53l0x.VL53L0X_SetTuningSettingBuffer

def VL53L0X_GetTuningSettingBuffer(Dev, ppTuningSettingBuffer, pUseInternalTuningSettings):
    return _rpi_vl53l0x.VL53L0X_GetTuningSettingBuffer(Dev, ppTuningSettingBuffer, pUseInternalTuningSettings)
VL53L0X_GetTuningSettingBuffer = _rpi_vl53l0x.VL53L0X_GetTuningSettingBuffer

def VL53L0X_StaticInit(Dev):
    return _rpi_vl53l0x.VL53L0X_StaticInit(Dev)
VL53L0X_StaticInit = _rpi_vl53l0x.VL53L0X_StaticInit

def VL53L0X_WaitDeviceBooted(Dev):
    return _rpi_vl53l0x.VL53L0X_WaitDeviceBooted(Dev)
VL53L0X_WaitDeviceBooted = _rpi_vl53l0x.VL53L0X_WaitDeviceBooted

def VL53L0X_ResetDevice(Dev):
    return _rpi_vl53l0x.VL53L0X_ResetDevice(Dev)
VL53L0X_ResetDevice = _rpi_vl53l0x.VL53L0X_ResetDevice

def VL53L0X_SetDeviceParameters(Dev, pDeviceParameters):
    return _rpi_vl53l0x.VL53L0X_SetDeviceParameters(Dev, pDeviceParameters)
VL53L0X_SetDeviceParameters = _rpi_vl53l0x.VL53L0X_SetDeviceParameters

def VL53L0X_GetDeviceParameters(Dev, pDeviceParameters):
    return _rpi_vl53l0x.VL53L0X_GetDeviceParameters(Dev, pDeviceParameters)
VL53L0X_GetDeviceParameters = _rpi_vl53l0x.VL53L0X_GetDeviceParameters

def VL53L0X_SetDeviceMode(Dev, DeviceMode):
    return _rpi_vl53l0x.VL53L0X_SetDeviceMode(Dev, DeviceMode)
VL53L0X_SetDeviceMode = _rpi_vl53l0x.VL53L0X_SetDeviceMode

def VL53L0X_GetDeviceMode(Dev, pDeviceMode):
    return _rpi_vl53l0x.VL53L0X_GetDeviceMode(Dev, pDeviceMode)
VL53L0X_GetDeviceMode = _rpi_vl53l0x.VL53L0X_GetDeviceMode

def VL53L0X_SetRangeFractionEnable(Dev, Enable):
    return _rpi_vl53l0x.VL53L0X_SetRangeFractionEnable(Dev, Enable)
VL53L0X_SetRangeFractionEnable = _rpi_vl53l0x.VL53L0X_SetRangeFractionEnable

def VL53L0X_GetFractionEnable(Dev, pEnable):
    return _rpi_vl53l0x.VL53L0X_GetFractionEnable(Dev, pEnable)
VL53L0X_GetFractionEnable = _rpi_vl53l0x.VL53L0X_GetFractionEnable

def VL53L0X_SetHistogramMode(Dev, HistogramMode):
    return _rpi_vl53l0x.VL53L0X_SetHistogramMode(Dev, HistogramMode)
VL53L0X_SetHistogramMode = _rpi_vl53l0x.VL53L0X_SetHistogramMode

def VL53L0X_GetHistogramMode(Dev, pHistogramMode):
    return _rpi_vl53l0x.VL53L0X_GetHistogramMode(Dev, pHistogramMode)
VL53L0X_GetHistogramMode = _rpi_vl53l0x.VL53L0X_GetHistogramMode

def VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, MeasurementTimingBudgetMicroSeconds):
    return _rpi_vl53l0x.VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, MeasurementTimingBudgetMicroSeconds)
VL53L0X_SetMeasurementTimingBudgetMicroSeconds = _rpi_vl53l0x.VL53L0X_SetMeasurementTimingBudgetMicroSeconds

def VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev, pMeasurementTimingBudgetMicroSeconds):
    return _rpi_vl53l0x.VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev, pMeasurementTimingBudgetMicroSeconds)
VL53L0X_GetMeasurementTimingBudgetMicroSeconds = _rpi_vl53l0x.VL53L0X_GetMeasurementTimingBudgetMicroSeconds

def VL53L0X_GetVcselPulsePeriod(Dev, VcselPeriodType, pVCSELPulsePeriod):
    return _rpi_vl53l0x.VL53L0X_GetVcselPulsePeriod(Dev, VcselPeriodType, pVCSELPulsePeriod)
VL53L0X_GetVcselPulsePeriod = _rpi_vl53l0x.VL53L0X_GetVcselPulsePeriod

def VL53L0X_SetVcselPulsePeriod(Dev, VcselPeriodType, VCSELPulsePeriod):
    return _rpi_vl53l0x.VL53L0X_SetVcselPulsePeriod(Dev, VcselPeriodType, VCSELPulsePeriod)
VL53L0X_SetVcselPulsePeriod = _rpi_vl53l0x.VL53L0X_SetVcselPulsePeriod

def VL53L0X_SetSequenceStepEnable(Dev, SequenceStepId, SequenceStepEnabled):
    return _rpi_vl53l0x.VL53L0X_SetSequenceStepEnable(Dev, SequenceStepId, SequenceStepEnabled)
VL53L0X_SetSequenceStepEnable = _rpi_vl53l0x.VL53L0X_SetSequenceStepEnable

def VL53L0X_GetSequenceStepEnable(Dev, SequenceStepId, pSequenceStepEnabled):
    return _rpi_vl53l0x.VL53L0X_GetSequenceStepEnable(Dev, SequenceStepId, pSequenceStepEnabled)
VL53L0X_GetSequenceStepEnable = _rpi_vl53l0x.VL53L0X_GetSequenceStepEnable

def VL53L0X_GetSequenceStepEnables(Dev, pSchedulerSequenceSteps):
    return _rpi_vl53l0x.VL53L0X_GetSequenceStepEnables(Dev, pSchedulerSequenceSteps)
VL53L0X_GetSequenceStepEnables = _rpi_vl53l0x.VL53L0X_GetSequenceStepEnables

def VL53L0X_SetSequenceStepTimeout(Dev, SequenceStepId, TimeOutMilliSecs):
    return _rpi_vl53l0x.VL53L0X_SetSequenceStepTimeout(Dev, SequenceStepId, TimeOutMilliSecs)
VL53L0X_SetSequenceStepTimeout = _rpi_vl53l0x.VL53L0X_SetSequenceStepTimeout

def VL53L0X_GetSequenceStepTimeout(Dev, SequenceStepId, pTimeOutMilliSecs):
    return _rpi_vl53l0x.VL53L0X_GetSequenceStepTimeout(Dev, SequenceStepId, pTimeOutMilliSecs)
VL53L0X_GetSequenceStepTimeout = _rpi_vl53l0x.VL53L0X_GetSequenceStepTimeout

def VL53L0X_GetNumberOfSequenceSteps(Dev, pNumberOfSequenceSteps):
    return _rpi_vl53l0x.VL53L0X_GetNumberOfSequenceSteps(Dev, pNumberOfSequenceSteps)
VL53L0X_GetNumberOfSequenceSteps = _rpi_vl53l0x.VL53L0X_GetNumberOfSequenceSteps

def VL53L0X_GetSequenceStepsInfo(SequenceStepId, pSequenceStepsString):
    return _rpi_vl53l0x.VL53L0X_GetSequenceStepsInfo(SequenceStepId, pSequenceStepsString)
VL53L0X_GetSequenceStepsInfo = _rpi_vl53l0x.VL53L0X_GetSequenceStepsInfo

def VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev, InterMeasurementPeriodMilliSeconds):
    return _rpi_vl53l0x.VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev, InterMeasurementPeriodMilliSeconds)
VL53L0X_SetInterMeasurementPeriodMilliSeconds = _rpi_vl53l0x.VL53L0X_SetInterMeasurementPeriodMilliSeconds

def VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev, pInterMeasurementPeriodMilliSeconds):
    return _rpi_vl53l0x.VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev, pInterMeasurementPeriodMilliSeconds)
VL53L0X_GetInterMeasurementPeriodMilliSeconds = _rpi_vl53l0x.VL53L0X_GetInterMeasurementPeriodMilliSeconds

def VL53L0X_SetXTalkCompensationEnable(Dev, XTalkCompensationEnable):
    return _rpi_vl53l0x.VL53L0X_SetXTalkCompensationEnable(Dev, XTalkCompensationEnable)
VL53L0X_SetXTalkCompensationEnable = _rpi_vl53l0x.VL53L0X_SetXTalkCompensationEnable

def VL53L0X_GetXTalkCompensationEnable(Dev, pXTalkCompensationEnable):
    return _rpi_vl53l0x.VL53L0X_GetXTalkCompensationEnable(Dev, pXTalkCompensationEnable)
VL53L0X_GetXTalkCompensationEnable = _rpi_vl53l0x.VL53L0X_GetXTalkCompensationEnable

def VL53L0X_SetXTalkCompensationRateMegaCps(Dev, XTalkCompensationRateMegaCps):
    return _rpi_vl53l0x.VL53L0X_SetXTalkCompensationRateMegaCps(Dev, XTalkCompensationRateMegaCps)
VL53L0X_SetXTalkCompensationRateMegaCps = _rpi_vl53l0x.VL53L0X_SetXTalkCompensationRateMegaCps

def VL53L0X_GetXTalkCompensationRateMegaCps(Dev, pXTalkCompensationRateMegaCps):
    return _rpi_vl53l0x.VL53L0X_GetXTalkCompensationRateMegaCps(Dev, pXTalkCompensationRateMegaCps)
VL53L0X_GetXTalkCompensationRateMegaCps = _rpi_vl53l0x.VL53L0X_GetXTalkCompensationRateMegaCps

def VL53L0X_SetRefCalibration(Dev, VhvSettings, PhaseCal):
    return _rpi_vl53l0x.VL53L0X_SetRefCalibration(Dev, VhvSettings, PhaseCal)
VL53L0X_SetRefCalibration = _rpi_vl53l0x.VL53L0X_SetRefCalibration

def VL53L0X_GetRefCalibration(Dev, pVhvSettings, pPhaseCal):
    return _rpi_vl53l0x.VL53L0X_GetRefCalibration(Dev, pVhvSettings, pPhaseCal)
VL53L0X_GetRefCalibration = _rpi_vl53l0x.VL53L0X_GetRefCalibration

def VL53L0X_GetNumberOfLimitCheck(pNumberOfLimitCheck):
    return _rpi_vl53l0x.VL53L0X_GetNumberOfLimitCheck(pNumberOfLimitCheck)
VL53L0X_GetNumberOfLimitCheck = _rpi_vl53l0x.VL53L0X_GetNumberOfLimitCheck

def VL53L0X_GetLimitCheckInfo(Dev, LimitCheckId, pLimitCheckString):
    return _rpi_vl53l0x.VL53L0X_GetLimitCheckInfo(Dev, LimitCheckId, pLimitCheckString)
VL53L0X_GetLimitCheckInfo = _rpi_vl53l0x.VL53L0X_GetLimitCheckInfo

def VL53L0X_GetLimitCheckStatus(Dev, LimitCheckId, pLimitCheckStatus):
    return _rpi_vl53l0x.VL53L0X_GetLimitCheckStatus(Dev, LimitCheckId, pLimitCheckStatus)
VL53L0X_GetLimitCheckStatus = _rpi_vl53l0x.VL53L0X_GetLimitCheckStatus

def VL53L0X_SetLimitCheckEnable(Dev, LimitCheckId, LimitCheckEnable):
    return _rpi_vl53l0x.VL53L0X_SetLimitCheckEnable(Dev, LimitCheckId, LimitCheckEnable)
VL53L0X_SetLimitCheckEnable = _rpi_vl53l0x.VL53L0X_SetLimitCheckEnable

def VL53L0X_GetLimitCheckEnable(Dev, LimitCheckId, pLimitCheckEnable):
    return _rpi_vl53l0x.VL53L0X_GetLimitCheckEnable(Dev, LimitCheckId, pLimitCheckEnable)
VL53L0X_GetLimitCheckEnable = _rpi_vl53l0x.VL53L0X_GetLimitCheckEnable

def VL53L0X_SetLimitCheckValue(Dev, LimitCheckId, LimitCheckValue):
    return _rpi_vl53l0x.VL53L0X_SetLimitCheckValue(Dev, LimitCheckId, LimitCheckValue)
VL53L0X_SetLimitCheckValue = _rpi_vl53l0x.VL53L0X_SetLimitCheckValue

def VL53L0X_GetLimitCheckValue(Dev, LimitCheckId, pLimitCheckValue):
    return _rpi_vl53l0x.VL53L0X_GetLimitCheckValue(Dev, LimitCheckId, pLimitCheckValue)
VL53L0X_GetLimitCheckValue = _rpi_vl53l0x.VL53L0X_GetLimitCheckValue

def VL53L0X_GetLimitCheckCurrent(Dev, LimitCheckId, pLimitCheckCurrent):
    return _rpi_vl53l0x.VL53L0X_GetLimitCheckCurrent(Dev, LimitCheckId, pLimitCheckCurrent)
VL53L0X_GetLimitCheckCurrent = _rpi_vl53l0x.VL53L0X_GetLimitCheckCurrent

def VL53L0X_SetWrapAroundCheckEnable(Dev, WrapAroundCheckEnable):
    return _rpi_vl53l0x.VL53L0X_SetWrapAroundCheckEnable(Dev, WrapAroundCheckEnable)
VL53L0X_SetWrapAroundCheckEnable = _rpi_vl53l0x.VL53L0X_SetWrapAroundCheckEnable

def VL53L0X_GetWrapAroundCheckEnable(Dev, pWrapAroundCheckEnable):
    return _rpi_vl53l0x.VL53L0X_GetWrapAroundCheckEnable(Dev, pWrapAroundCheckEnable)
VL53L0X_GetWrapAroundCheckEnable = _rpi_vl53l0x.VL53L0X_GetWrapAroundCheckEnable

def VL53L0X_SetDmaxCalParameters(Dev, RangeMilliMeter, SignalRateRtnMegaCps):
    return _rpi_vl53l0x.VL53L0X_SetDmaxCalParameters(Dev, RangeMilliMeter, SignalRateRtnMegaCps)
VL53L0X_SetDmaxCalParameters = _rpi_vl53l0x.VL53L0X_SetDmaxCalParameters

def VL53L0X_GetDmaxCalParameters(Dev, pRangeMilliMeter, pSignalRateRtnMegaCps):
    return _rpi_vl53l0x.VL53L0X_GetDmaxCalParameters(Dev, pRangeMilliMeter, pSignalRateRtnMegaCps)
VL53L0X_GetDmaxCalParameters = _rpi_vl53l0x.VL53L0X_GetDmaxCalParameters

def VL53L0X_PerformSingleMeasurement(Dev):
    return _rpi_vl53l0x.VL53L0X_PerformSingleMeasurement(Dev)
VL53L0X_PerformSingleMeasurement = _rpi_vl53l0x.VL53L0X_PerformSingleMeasurement

def VL53L0X_PerformRefCalibration(Dev, pVhvSettings, pPhaseCal):
    return _rpi_vl53l0x.VL53L0X_PerformRefCalibration(Dev, pVhvSettings, pPhaseCal)
VL53L0X_PerformRefCalibration = _rpi_vl53l0x.VL53L0X_PerformRefCalibration

def VL53L0X_PerformXTalkMeasurement(Dev, TimeoutMs, pXtalkPerSpad, pAmbientTooHigh):
    return _rpi_vl53l0x.VL53L0X_PerformXTalkMeasurement(Dev, TimeoutMs, pXtalkPerSpad, pAmbientTooHigh)
VL53L0X_PerformXTalkMeasurement = _rpi_vl53l0x.VL53L0X_PerformXTalkMeasurement

def VL53L0X_PerformXTalkCalibration(Dev, XTalkCalDistance, pXTalkCompensationRateMegaCps):
    return _rpi_vl53l0x.VL53L0X_PerformXTalkCalibration(Dev, XTalkCalDistance, pXTalkCompensationRateMegaCps)
VL53L0X_PerformXTalkCalibration = _rpi_vl53l0x.VL53L0X_PerformXTalkCalibration

def VL53L0X_PerformOffsetCalibration(Dev, CalDistanceMilliMeter, pOffsetMicroMeter):
    return _rpi_vl53l0x.VL53L0X_PerformOffsetCalibration(Dev, CalDistanceMilliMeter, pOffsetMicroMeter)
VL53L0X_PerformOffsetCalibration = _rpi_vl53l0x.VL53L0X_PerformOffsetCalibration

def VL53L0X_StartMeasurement(Dev):
    return _rpi_vl53l0x.VL53L0X_StartMeasurement(Dev)
VL53L0X_StartMeasurement = _rpi_vl53l0x.VL53L0X_StartMeasurement

def VL53L0X_StopMeasurement(Dev):
    return _rpi_vl53l0x.VL53L0X_StopMeasurement(Dev)
VL53L0X_StopMeasurement = _rpi_vl53l0x.VL53L0X_StopMeasurement

def VL53L0X_GetMeasurementDataReady(Dev, pMeasurementDataReady):
    return _rpi_vl53l0x.VL53L0X_GetMeasurementDataReady(Dev, pMeasurementDataReady)
VL53L0X_GetMeasurementDataReady = _rpi_vl53l0x.VL53L0X_GetMeasurementDataReady

def VL53L0X_WaitDeviceReadyForNewMeasurement(Dev, MaxLoop):
    return _rpi_vl53l0x.VL53L0X_WaitDeviceReadyForNewMeasurement(Dev, MaxLoop)
VL53L0X_WaitDeviceReadyForNewMeasurement = _rpi_vl53l0x.VL53L0X_WaitDeviceReadyForNewMeasurement

def VL53L0X_GetMeasurementRefSignal(Dev, pMeasurementRefSignal):
    return _rpi_vl53l0x.VL53L0X_GetMeasurementRefSignal(Dev, pMeasurementRefSignal)
VL53L0X_GetMeasurementRefSignal = _rpi_vl53l0x.VL53L0X_GetMeasurementRefSignal

def VL53L0X_GetRangingMeasurementData(Dev, pRangingMeasurementData):
    return _rpi_vl53l0x.VL53L0X_GetRangingMeasurementData(Dev, pRangingMeasurementData)
VL53L0X_GetRangingMeasurementData = _rpi_vl53l0x.VL53L0X_GetRangingMeasurementData

def VL53L0X_GetHistogramMeasurementData(Dev, pHistogramMeasurementData):
    return _rpi_vl53l0x.VL53L0X_GetHistogramMeasurementData(Dev, pHistogramMeasurementData)
VL53L0X_GetHistogramMeasurementData = _rpi_vl53l0x.VL53L0X_GetHistogramMeasurementData

def VL53L0X_PerformSingleRangingMeasurement(Dev, pRangingMeasurementData):
    return _rpi_vl53l0x.VL53L0X_PerformSingleRangingMeasurement(Dev, pRangingMeasurementData)
VL53L0X_PerformSingleRangingMeasurement = _rpi_vl53l0x.VL53L0X_PerformSingleRangingMeasurement

def VL53L0X_PerformSingleHistogramMeasurement(Dev, pHistogramMeasurementData):
    return _rpi_vl53l0x.VL53L0X_PerformSingleHistogramMeasurement(Dev, pHistogramMeasurementData)
VL53L0X_PerformSingleHistogramMeasurement = _rpi_vl53l0x.VL53L0X_PerformSingleHistogramMeasurement

def VL53L0X_SetNumberOfROIZones(Dev, NumberOfROIZones):
    return _rpi_vl53l0x.VL53L0X_SetNumberOfROIZones(Dev, NumberOfROIZones)
VL53L0X_SetNumberOfROIZones = _rpi_vl53l0x.VL53L0X_SetNumberOfROIZones

def VL53L0X_GetNumberOfROIZones(Dev, pNumberOfROIZones):
    return _rpi_vl53l0x.VL53L0X_GetNumberOfROIZones(Dev, pNumberOfROIZones)
VL53L0X_GetNumberOfROIZones = _rpi_vl53l0x.VL53L0X_GetNumberOfROIZones

def VL53L0X_GetMaxNumberOfROIZones(Dev, pMaxNumberOfROIZones):
    return _rpi_vl53l0x.VL53L0X_GetMaxNumberOfROIZones(Dev, pMaxNumberOfROIZones)
VL53L0X_GetMaxNumberOfROIZones = _rpi_vl53l0x.VL53L0X_GetMaxNumberOfROIZones

def VL53L0X_SetGpioConfig(Dev, Pin, DeviceMode, Functionality, Polarity):
    return _rpi_vl53l0x.VL53L0X_SetGpioConfig(Dev, Pin, DeviceMode, Functionality, Polarity)
VL53L0X_SetGpioConfig = _rpi_vl53l0x.VL53L0X_SetGpioConfig

def VL53L0X_GetGpioConfig(Dev, Pin, pDeviceMode, pFunctionality, pPolarity):
    return _rpi_vl53l0x.VL53L0X_GetGpioConfig(Dev, Pin, pDeviceMode, pFunctionality, pPolarity)
VL53L0X_GetGpioConfig = _rpi_vl53l0x.VL53L0X_GetGpioConfig

def VL53L0X_SetInterruptThresholds(Dev, DeviceMode, ThresholdLow, ThresholdHigh):
    return _rpi_vl53l0x.VL53L0X_SetInterruptThresholds(Dev, DeviceMode, ThresholdLow, ThresholdHigh)
VL53L0X_SetInterruptThresholds = _rpi_vl53l0x.VL53L0X_SetInterruptThresholds

def VL53L0X_GetInterruptThresholds(Dev, DeviceMode, pThresholdLow, pThresholdHigh):
    return _rpi_vl53l0x.VL53L0X_GetInterruptThresholds(Dev, DeviceMode, pThresholdLow, pThresholdHigh)
VL53L0X_GetInterruptThresholds = _rpi_vl53l0x.VL53L0X_GetInterruptThresholds

def VL53L0X_GetStopCompletedStatus(Dev, pStopStatus):
    return _rpi_vl53l0x.VL53L0X_GetStopCompletedStatus(Dev, pStopStatus)
VL53L0X_GetStopCompletedStatus = _rpi_vl53l0x.VL53L0X_GetStopCompletedStatus

def VL53L0X_ClearInterruptMask(Dev, InterruptMask):
    return _rpi_vl53l0x.VL53L0X_ClearInterruptMask(Dev, InterruptMask)
VL53L0X_ClearInterruptMask = _rpi_vl53l0x.VL53L0X_ClearInterruptMask

def VL53L0X_GetInterruptMaskStatus(Dev, pInterruptMaskStatus):
    return _rpi_vl53l0x.VL53L0X_GetInterruptMaskStatus(Dev, pInterruptMaskStatus)
VL53L0X_GetInterruptMaskStatus = _rpi_vl53l0x.VL53L0X_GetInterruptMaskStatus

def VL53L0X_EnableInterruptMask(Dev, InterruptMask):
    return _rpi_vl53l0x.VL53L0X_EnableInterruptMask(Dev, InterruptMask)
VL53L0X_EnableInterruptMask = _rpi_vl53l0x.VL53L0X_EnableInterruptMask

def VL53L0X_SetSpadAmbientDamperThreshold(Dev, SpadAmbientDamperThreshold):
    return _rpi_vl53l0x.VL53L0X_SetSpadAmbientDamperThreshold(Dev, SpadAmbientDamperThreshold)
VL53L0X_SetSpadAmbientDamperThreshold = _rpi_vl53l0x.VL53L0X_SetSpadAmbientDamperThreshold

def VL53L0X_GetSpadAmbientDamperThreshold(Dev, pSpadAmbientDamperThreshold):
    return _rpi_vl53l0x.VL53L0X_GetSpadAmbientDamperThreshold(Dev, pSpadAmbientDamperThreshold)
VL53L0X_GetSpadAmbientDamperThreshold = _rpi_vl53l0x.VL53L0X_GetSpadAmbientDamperThreshold

def VL53L0X_SetSpadAmbientDamperFactor(Dev, SpadAmbientDamperFactor):
    return _rpi_vl53l0x.VL53L0X_SetSpadAmbientDamperFactor(Dev, SpadAmbientDamperFactor)
VL53L0X_SetSpadAmbientDamperFactor = _rpi_vl53l0x.VL53L0X_SetSpadAmbientDamperFactor

def VL53L0X_GetSpadAmbientDamperFactor(Dev, pSpadAmbientDamperFactor):
    return _rpi_vl53l0x.VL53L0X_GetSpadAmbientDamperFactor(Dev, pSpadAmbientDamperFactor)
VL53L0X_GetSpadAmbientDamperFactor = _rpi_vl53l0x.VL53L0X_GetSpadAmbientDamperFactor

def VL53L0X_PerformRefSpadManagement(Dev, refSpadCount, isApertureSpads):
    return _rpi_vl53l0x.VL53L0X_PerformRefSpadManagement(Dev, refSpadCount, isApertureSpads)
VL53L0X_PerformRefSpadManagement = _rpi_vl53l0x.VL53L0X_PerformRefSpadManagement

def VL53L0X_SetReferenceSpads(Dev, refSpadCount, isApertureSpads):
    return _rpi_vl53l0x.VL53L0X_SetReferenceSpads(Dev, refSpadCount, isApertureSpads)
VL53L0X_SetReferenceSpads = _rpi_vl53l0x.VL53L0X_SetReferenceSpads

def VL53L0X_GetReferenceSpads(Dev, refSpadCount, isApertureSpads):
    return _rpi_vl53l0x.VL53L0X_GetReferenceSpads(Dev, refSpadCount, isApertureSpads)
VL53L0X_GetReferenceSpads = _rpi_vl53l0x.VL53L0X_GetReferenceSpads
VL53L0X10_SPECIFICATION_VER_MAJOR = _rpi_vl53l0x.VL53L0X10_SPECIFICATION_VER_MAJOR
VL53L0X10_SPECIFICATION_VER_MINOR = _rpi_vl53l0x.VL53L0X10_SPECIFICATION_VER_MINOR
VL53L0X10_SPECIFICATION_VER_SUB = _rpi_vl53l0x.VL53L0X10_SPECIFICATION_VER_SUB
VL53L0X10_SPECIFICATION_VER_REVISION = _rpi_vl53l0x.VL53L0X10_SPECIFICATION_VER_REVISION
VL53L0X10_IMPLEMENTATION_VER_MAJOR = _rpi_vl53l0x.VL53L0X10_IMPLEMENTATION_VER_MAJOR
VL53L0X10_IMPLEMENTATION_VER_MINOR = _rpi_vl53l0x.VL53L0X10_IMPLEMENTATION_VER_MINOR
VL53L0X10_IMPLEMENTATION_VER_SUB = _rpi_vl53l0x.VL53L0X10_IMPLEMENTATION_VER_SUB
VL53L0X10_IMPLEMENTATION_VER_REVISION = _rpi_vl53l0x.VL53L0X10_IMPLEMENTATION_VER_REVISION
VL53L0X_SPECIFICATION_VER_MAJOR = _rpi_vl53l0x.VL53L0X_SPECIFICATION_VER_MAJOR
VL53L0X_SPECIFICATION_VER_MINOR = _rpi_vl53l0x.VL53L0X_SPECIFICATION_VER_MINOR
VL53L0X_SPECIFICATION_VER_SUB = _rpi_vl53l0x.VL53L0X_SPECIFICATION_VER_SUB
VL53L0X_SPECIFICATION_VER_REVISION = _rpi_vl53l0x.VL53L0X_SPECIFICATION_VER_REVISION
VL53L0X_IMPLEMENTATION_VER_MAJOR = _rpi_vl53l0x.VL53L0X_IMPLEMENTATION_VER_MAJOR
VL53L0X_IMPLEMENTATION_VER_MINOR = _rpi_vl53l0x.VL53L0X_IMPLEMENTATION_VER_MINOR
VL53L0X_IMPLEMENTATION_VER_SUB = _rpi_vl53l0x.VL53L0X_IMPLEMENTATION_VER_SUB
VL53L0X_IMPLEMENTATION_VER_REVISION = _rpi_vl53l0x.VL53L0X_IMPLEMENTATION_VER_REVISION
VL53L0X_DEFAULT_MAX_LOOP = _rpi_vl53l0x.VL53L0X_DEFAULT_MAX_LOOP
VL53L0X_MAX_STRING_LENGTH = _rpi_vl53l0x.VL53L0X_MAX_STRING_LENGTH
class VL53L0X_Version_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_Version_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_Version_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["revision"] = _rpi_vl53l0x.VL53L0X_Version_t_revision_set
    __swig_getmethods__["revision"] = _rpi_vl53l0x.VL53L0X_Version_t_revision_get
    if _newclass:
        revision = _swig_property(_rpi_vl53l0x.VL53L0X_Version_t_revision_get, _rpi_vl53l0x.VL53L0X_Version_t_revision_set)
    __swig_setmethods__["major"] = _rpi_vl53l0x.VL53L0X_Version_t_major_set
    __swig_getmethods__["major"] = _rpi_vl53l0x.VL53L0X_Version_t_major_get
    if _newclass:
        major = _swig_property(_rpi_vl53l0x.VL53L0X_Version_t_major_get, _rpi_vl53l0x.VL53L0X_Version_t_major_set)
    __swig_setmethods__["minor"] = _rpi_vl53l0x.VL53L0X_Version_t_minor_set
    __swig_getmethods__["minor"] = _rpi_vl53l0x.VL53L0X_Version_t_minor_get
    if _newclass:
        minor = _swig_property(_rpi_vl53l0x.VL53L0X_Version_t_minor_get, _rpi_vl53l0x.VL53L0X_Version_t_minor_set)
    __swig_setmethods__["build"] = _rpi_vl53l0x.VL53L0X_Version_t_build_set
    __swig_getmethods__["build"] = _rpi_vl53l0x.VL53L0X_Version_t_build_get
    if _newclass:
        build = _swig_property(_rpi_vl53l0x.VL53L0X_Version_t_build_get, _rpi_vl53l0x.VL53L0X_Version_t_build_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_Version_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_Version_t
    __del__ = lambda self: None
VL53L0X_Version_t_swigregister = _rpi_vl53l0x.VL53L0X_Version_t_swigregister
VL53L0X_Version_t_swigregister(VL53L0X_Version_t)

class VL53L0X_DeviceInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_DeviceInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_DeviceInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_Name_set
    __swig_getmethods__["Name"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_Name_get
    if _newclass:
        Name = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceInfo_t_Name_get, _rpi_vl53l0x.VL53L0X_DeviceInfo_t_Name_set)
    __swig_setmethods__["Type"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_Type_set
    __swig_getmethods__["Type"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_Type_get
    if _newclass:
        Type = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceInfo_t_Type_get, _rpi_vl53l0x.VL53L0X_DeviceInfo_t_Type_set)
    __swig_setmethods__["ProductId"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductId_set
    __swig_getmethods__["ProductId"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductId_get
    if _newclass:
        ProductId = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductId_get, _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductId_set)
    __swig_setmethods__["ProductType"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductType_set
    __swig_getmethods__["ProductType"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductType_get
    if _newclass:
        ProductType = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductType_get, _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductType_set)
    __swig_setmethods__["ProductRevisionMajor"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductRevisionMajor_set
    __swig_getmethods__["ProductRevisionMajor"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductRevisionMajor_get
    if _newclass:
        ProductRevisionMajor = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductRevisionMajor_get, _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductRevisionMajor_set)
    __swig_setmethods__["ProductRevisionMinor"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductRevisionMinor_set
    __swig_getmethods__["ProductRevisionMinor"] = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductRevisionMinor_get
    if _newclass:
        ProductRevisionMinor = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductRevisionMinor_get, _rpi_vl53l0x.VL53L0X_DeviceInfo_t_ProductRevisionMinor_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_DeviceInfo_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_DeviceInfo_t
    __del__ = lambda self: None
VL53L0X_DeviceInfo_t_swigregister = _rpi_vl53l0x.VL53L0X_DeviceInfo_t_swigregister
VL53L0X_DeviceInfo_t_swigregister(VL53L0X_DeviceInfo_t)

VL53L0X_ERROR_NONE = _rpi_vl53l0x.VL53L0X_ERROR_NONE
VL53L0X_ERROR_NOT_SUPPORTED = _rpi_vl53l0x.VL53L0X_ERROR_NOT_SUPPORTED
VL53L0X_ERROR_TIME_OUT = _rpi_vl53l0x.VL53L0X_ERROR_TIME_OUT
VL53L0X_ERROR_CONTROL_INTERFACE = _rpi_vl53l0x.VL53L0X_ERROR_CONTROL_INTERFACE
VL53L0X_DEVICEMODE_SINGLE_RANGING = _rpi_vl53l0x.VL53L0X_DEVICEMODE_SINGLE_RANGING
VL53L0X_DEVICEMODE_CONTINUOUS_RANGING = _rpi_vl53l0x.VL53L0X_DEVICEMODE_CONTINUOUS_RANGING
VL53L0X_DEVICEMODE_SINGLE_HISTOGRAM = _rpi_vl53l0x.VL53L0X_DEVICEMODE_SINGLE_HISTOGRAM
VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING = _rpi_vl53l0x.VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING
VL53L0X_DEVICEMODE_SINGLE_ALS = _rpi_vl53l0x.VL53L0X_DEVICEMODE_SINGLE_ALS
VL53L0X_DEVICEMODE_GPIO_DRIVE = _rpi_vl53l0x.VL53L0X_DEVICEMODE_GPIO_DRIVE
VL53L0X_DEVICEMODE_GPIO_OSC = _rpi_vl53l0x.VL53L0X_DEVICEMODE_GPIO_OSC
VL53L0X_HISTOGRAMMODE_DISABLED = _rpi_vl53l0x.VL53L0X_HISTOGRAMMODE_DISABLED
VL53L0X_HISTOGRAMMODE_REFERENCE_ONLY = _rpi_vl53l0x.VL53L0X_HISTOGRAMMODE_REFERENCE_ONLY
VL53L0X_HISTOGRAMMODE_RETURN_ONLY = _rpi_vl53l0x.VL53L0X_HISTOGRAMMODE_RETURN_ONLY
VL53L0X_HISTOGRAMMODE_BOTH = _rpi_vl53l0x.VL53L0X_HISTOGRAMMODE_BOTH
VL53L0X_POWERMODE_STANDBY_LEVEL1 = _rpi_vl53l0x.VL53L0X_POWERMODE_STANDBY_LEVEL1
VL53L0X_POWERMODE_STANDBY_LEVEL2 = _rpi_vl53l0x.VL53L0X_POWERMODE_STANDBY_LEVEL2
VL53L0X_POWERMODE_IDLE_LEVEL1 = _rpi_vl53l0x.VL53L0X_POWERMODE_IDLE_LEVEL1
VL53L0X_POWERMODE_IDLE_LEVEL2 = _rpi_vl53l0x.VL53L0X_POWERMODE_IDLE_LEVEL2
class VL53L0X_DeviceParameters_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_DeviceParameters_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_DeviceParameters_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DeviceMode"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_DeviceMode_set
    __swig_getmethods__["DeviceMode"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_DeviceMode_get
    if _newclass:
        DeviceMode = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_DeviceMode_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_DeviceMode_set)
    __swig_setmethods__["HistogramMode"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_HistogramMode_set
    __swig_getmethods__["HistogramMode"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_HistogramMode_get
    if _newclass:
        HistogramMode = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_HistogramMode_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_HistogramMode_set)
    __swig_setmethods__["MeasurementTimingBudgetMicroSeconds"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_MeasurementTimingBudgetMicroSeconds_set
    __swig_getmethods__["MeasurementTimingBudgetMicroSeconds"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_MeasurementTimingBudgetMicroSeconds_get
    if _newclass:
        MeasurementTimingBudgetMicroSeconds = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_MeasurementTimingBudgetMicroSeconds_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_MeasurementTimingBudgetMicroSeconds_set)
    __swig_setmethods__["InterMeasurementPeriodMilliSeconds"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_InterMeasurementPeriodMilliSeconds_set
    __swig_getmethods__["InterMeasurementPeriodMilliSeconds"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_InterMeasurementPeriodMilliSeconds_get
    if _newclass:
        InterMeasurementPeriodMilliSeconds = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_InterMeasurementPeriodMilliSeconds_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_InterMeasurementPeriodMilliSeconds_set)
    __swig_setmethods__["XTalkCompensationEnable"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationEnable_set
    __swig_getmethods__["XTalkCompensationEnable"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationEnable_get
    if _newclass:
        XTalkCompensationEnable = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationEnable_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationEnable_set)
    __swig_setmethods__["XTalkCompensationRangeMilliMeter"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationRangeMilliMeter_set
    __swig_getmethods__["XTalkCompensationRangeMilliMeter"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationRangeMilliMeter_get
    if _newclass:
        XTalkCompensationRangeMilliMeter = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationRangeMilliMeter_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationRangeMilliMeter_set)
    __swig_setmethods__["XTalkCompensationRateMegaCps"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationRateMegaCps_set
    __swig_getmethods__["XTalkCompensationRateMegaCps"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationRateMegaCps_get
    if _newclass:
        XTalkCompensationRateMegaCps = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationRateMegaCps_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_XTalkCompensationRateMegaCps_set)
    __swig_setmethods__["RangeOffsetMicroMeters"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_RangeOffsetMicroMeters_set
    __swig_getmethods__["RangeOffsetMicroMeters"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_RangeOffsetMicroMeters_get
    if _newclass:
        RangeOffsetMicroMeters = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_RangeOffsetMicroMeters_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_RangeOffsetMicroMeters_set)
    __swig_setmethods__["LimitChecksEnable"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksEnable_set
    __swig_getmethods__["LimitChecksEnable"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksEnable_get
    if _newclass:
        LimitChecksEnable = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksEnable_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksEnable_set)
    __swig_setmethods__["LimitChecksStatus"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksStatus_set
    __swig_getmethods__["LimitChecksStatus"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksStatus_get
    if _newclass:
        LimitChecksStatus = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksStatus_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksStatus_set)
    __swig_setmethods__["LimitChecksValue"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksValue_set
    __swig_getmethods__["LimitChecksValue"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksValue_get
    if _newclass:
        LimitChecksValue = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksValue_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_LimitChecksValue_set)
    __swig_setmethods__["WrapAroundCheckEnable"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_WrapAroundCheckEnable_set
    __swig_getmethods__["WrapAroundCheckEnable"] = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_WrapAroundCheckEnable_get
    if _newclass:
        WrapAroundCheckEnable = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceParameters_t_WrapAroundCheckEnable_get, _rpi_vl53l0x.VL53L0X_DeviceParameters_t_WrapAroundCheckEnable_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_DeviceParameters_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_DeviceParameters_t
    __del__ = lambda self: None
VL53L0X_DeviceParameters_t_swigregister = _rpi_vl53l0x.VL53L0X_DeviceParameters_t_swigregister
VL53L0X_DeviceParameters_t_swigregister(VL53L0X_DeviceParameters_t)

VL53L0X_STATE_POWERDOWN = _rpi_vl53l0x.VL53L0X_STATE_POWERDOWN
VL53L0X_STATE_WAIT_STATICINIT = _rpi_vl53l0x.VL53L0X_STATE_WAIT_STATICINIT
VL53L0X_STATE_STANDBY = _rpi_vl53l0x.VL53L0X_STATE_STANDBY
VL53L0X_STATE_IDLE = _rpi_vl53l0x.VL53L0X_STATE_IDLE
VL53L0X_STATE_RUNNING = _rpi_vl53l0x.VL53L0X_STATE_RUNNING
VL53L0X_STATE_UNKNOWN = _rpi_vl53l0x.VL53L0X_STATE_UNKNOWN
VL53L0X_STATE_ERROR = _rpi_vl53l0x.VL53L0X_STATE_ERROR
class VL53L0X_DMaxData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_DMaxData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_DMaxData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AmbTuningWindowFactor_K"] = _rpi_vl53l0x.VL53L0X_DMaxData_t_AmbTuningWindowFactor_K_set
    __swig_getmethods__["AmbTuningWindowFactor_K"] = _rpi_vl53l0x.VL53L0X_DMaxData_t_AmbTuningWindowFactor_K_get
    if _newclass:
        AmbTuningWindowFactor_K = _swig_property(_rpi_vl53l0x.VL53L0X_DMaxData_t_AmbTuningWindowFactor_K_get, _rpi_vl53l0x.VL53L0X_DMaxData_t_AmbTuningWindowFactor_K_set)
    __swig_setmethods__["RetSignalAt0mm"] = _rpi_vl53l0x.VL53L0X_DMaxData_t_RetSignalAt0mm_set
    __swig_getmethods__["RetSignalAt0mm"] = _rpi_vl53l0x.VL53L0X_DMaxData_t_RetSignalAt0mm_get
    if _newclass:
        RetSignalAt0mm = _swig_property(_rpi_vl53l0x.VL53L0X_DMaxData_t_RetSignalAt0mm_get, _rpi_vl53l0x.VL53L0X_DMaxData_t_RetSignalAt0mm_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_DMaxData_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_DMaxData_t
    __del__ = lambda self: None
VL53L0X_DMaxData_t_swigregister = _rpi_vl53l0x.VL53L0X_DMaxData_t_swigregister
VL53L0X_DMaxData_t_swigregister(VL53L0X_DMaxData_t)

class VL53L0X_RangingMeasurementData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_RangingMeasurementData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_RangingMeasurementData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TimeStamp"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_TimeStamp_set
    __swig_getmethods__["TimeStamp"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_TimeStamp_get
    if _newclass:
        TimeStamp = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_TimeStamp_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_TimeStamp_set)
    __swig_setmethods__["MeasurementTimeUsec"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_MeasurementTimeUsec_set
    __swig_getmethods__["MeasurementTimeUsec"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_MeasurementTimeUsec_get
    if _newclass:
        MeasurementTimeUsec = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_MeasurementTimeUsec_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_MeasurementTimeUsec_set)
    __swig_setmethods__["RangeMilliMeter"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeMilliMeter_set
    __swig_getmethods__["RangeMilliMeter"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeMilliMeter_get
    if _newclass:
        RangeMilliMeter = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeMilliMeter_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeMilliMeter_set)
    __swig_setmethods__["RangeDMaxMilliMeter"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeDMaxMilliMeter_set
    __swig_getmethods__["RangeDMaxMilliMeter"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeDMaxMilliMeter_get
    if _newclass:
        RangeDMaxMilliMeter = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeDMaxMilliMeter_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeDMaxMilliMeter_set)
    __swig_setmethods__["SignalRateRtnMegaCps"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_SignalRateRtnMegaCps_set
    __swig_getmethods__["SignalRateRtnMegaCps"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_SignalRateRtnMegaCps_get
    if _newclass:
        SignalRateRtnMegaCps = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_SignalRateRtnMegaCps_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_SignalRateRtnMegaCps_set)
    __swig_setmethods__["AmbientRateRtnMegaCps"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_AmbientRateRtnMegaCps_set
    __swig_getmethods__["AmbientRateRtnMegaCps"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_AmbientRateRtnMegaCps_get
    if _newclass:
        AmbientRateRtnMegaCps = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_AmbientRateRtnMegaCps_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_AmbientRateRtnMegaCps_set)
    __swig_setmethods__["EffectiveSpadRtnCount"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_EffectiveSpadRtnCount_set
    __swig_getmethods__["EffectiveSpadRtnCount"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_EffectiveSpadRtnCount_get
    if _newclass:
        EffectiveSpadRtnCount = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_EffectiveSpadRtnCount_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_EffectiveSpadRtnCount_set)
    __swig_setmethods__["ZoneId"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_ZoneId_set
    __swig_getmethods__["ZoneId"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_ZoneId_get
    if _newclass:
        ZoneId = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_ZoneId_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_ZoneId_set)
    __swig_setmethods__["RangeFractionalPart"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeFractionalPart_set
    __swig_getmethods__["RangeFractionalPart"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeFractionalPart_get
    if _newclass:
        RangeFractionalPart = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeFractionalPart_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeFractionalPart_set)
    __swig_setmethods__["RangeStatus"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeStatus_set
    __swig_getmethods__["RangeStatus"] = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeStatus_get
    if _newclass:
        RangeStatus = _swig_property(_rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeStatus_get, _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_RangeStatus_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_RangingMeasurementData_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_RangingMeasurementData_t
    __del__ = lambda self: None
VL53L0X_RangingMeasurementData_t_swigregister = _rpi_vl53l0x.VL53L0X_RangingMeasurementData_t_swigregister
VL53L0X_RangingMeasurementData_t_swigregister(VL53L0X_RangingMeasurementData_t)

VL53L0X_HISTOGRAM_BUFFER_SIZE = _rpi_vl53l0x.VL53L0X_HISTOGRAM_BUFFER_SIZE
class VL53L0X_HistogramMeasurementData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_HistogramMeasurementData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_HistogramMeasurementData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HistogramData"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_HistogramData_set
    __swig_getmethods__["HistogramData"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_HistogramData_get
    if _newclass:
        HistogramData = _swig_property(_rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_HistogramData_get, _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_HistogramData_set)
    __swig_setmethods__["HistogramType"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_HistogramType_set
    __swig_getmethods__["HistogramType"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_HistogramType_get
    if _newclass:
        HistogramType = _swig_property(_rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_HistogramType_get, _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_HistogramType_set)
    __swig_setmethods__["FirstBin"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_FirstBin_set
    __swig_getmethods__["FirstBin"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_FirstBin_get
    if _newclass:
        FirstBin = _swig_property(_rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_FirstBin_get, _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_FirstBin_set)
    __swig_setmethods__["BufferSize"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_BufferSize_set
    __swig_getmethods__["BufferSize"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_BufferSize_get
    if _newclass:
        BufferSize = _swig_property(_rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_BufferSize_get, _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_BufferSize_set)
    __swig_setmethods__["NumberOfBins"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_NumberOfBins_set
    __swig_getmethods__["NumberOfBins"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_NumberOfBins_get
    if _newclass:
        NumberOfBins = _swig_property(_rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_NumberOfBins_get, _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_NumberOfBins_set)
    __swig_setmethods__["ErrorStatus"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_ErrorStatus_set
    __swig_getmethods__["ErrorStatus"] = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_ErrorStatus_get
    if _newclass:
        ErrorStatus = _swig_property(_rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_ErrorStatus_get, _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_ErrorStatus_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_HistogramMeasurementData_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_HistogramMeasurementData_t
    __del__ = lambda self: None
VL53L0X_HistogramMeasurementData_t_swigregister = _rpi_vl53l0x.VL53L0X_HistogramMeasurementData_t_swigregister
VL53L0X_HistogramMeasurementData_t_swigregister(VL53L0X_HistogramMeasurementData_t)

VL53L0X_REF_SPAD_BUFFER_SIZE = _rpi_vl53l0x.VL53L0X_REF_SPAD_BUFFER_SIZE
class VL53L0X_SpadData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_SpadData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_SpadData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RefSpadEnables"] = _rpi_vl53l0x.VL53L0X_SpadData_t_RefSpadEnables_set
    __swig_getmethods__["RefSpadEnables"] = _rpi_vl53l0x.VL53L0X_SpadData_t_RefSpadEnables_get
    if _newclass:
        RefSpadEnables = _swig_property(_rpi_vl53l0x.VL53L0X_SpadData_t_RefSpadEnables_get, _rpi_vl53l0x.VL53L0X_SpadData_t_RefSpadEnables_set)
    __swig_setmethods__["RefGoodSpadMap"] = _rpi_vl53l0x.VL53L0X_SpadData_t_RefGoodSpadMap_set
    __swig_getmethods__["RefGoodSpadMap"] = _rpi_vl53l0x.VL53L0X_SpadData_t_RefGoodSpadMap_get
    if _newclass:
        RefGoodSpadMap = _swig_property(_rpi_vl53l0x.VL53L0X_SpadData_t_RefGoodSpadMap_get, _rpi_vl53l0x.VL53L0X_SpadData_t_RefGoodSpadMap_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_SpadData_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_SpadData_t
    __del__ = lambda self: None
VL53L0X_SpadData_t_swigregister = _rpi_vl53l0x.VL53L0X_SpadData_t_swigregister
VL53L0X_SpadData_t_swigregister(VL53L0X_SpadData_t)

class VL53L0X_DeviceSpecificParameters_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_DeviceSpecificParameters_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_DeviceSpecificParameters_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OscFrequencyMHz"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_OscFrequencyMHz_set
    __swig_getmethods__["OscFrequencyMHz"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_OscFrequencyMHz_get
    if _newclass:
        OscFrequencyMHz = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_OscFrequencyMHz_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_OscFrequencyMHz_set)
    __swig_setmethods__["LastEncodedTimeout"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_LastEncodedTimeout_set
    __swig_getmethods__["LastEncodedTimeout"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_LastEncodedTimeout_get
    if _newclass:
        LastEncodedTimeout = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_LastEncodedTimeout_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_LastEncodedTimeout_set)
    __swig_setmethods__["Pin0GpioFunctionality"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_Pin0GpioFunctionality_set
    __swig_getmethods__["Pin0GpioFunctionality"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_Pin0GpioFunctionality_get
    if _newclass:
        Pin0GpioFunctionality = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_Pin0GpioFunctionality_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_Pin0GpioFunctionality_set)
    __swig_setmethods__["FinalRangeTimeoutMicroSecs"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_FinalRangeTimeoutMicroSecs_set
    __swig_getmethods__["FinalRangeTimeoutMicroSecs"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_FinalRangeTimeoutMicroSecs_get
    if _newclass:
        FinalRangeTimeoutMicroSecs = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_FinalRangeTimeoutMicroSecs_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_FinalRangeTimeoutMicroSecs_set)
    __swig_setmethods__["FinalRangeVcselPulsePeriod"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_FinalRangeVcselPulsePeriod_set
    __swig_getmethods__["FinalRangeVcselPulsePeriod"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_FinalRangeVcselPulsePeriod_get
    if _newclass:
        FinalRangeVcselPulsePeriod = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_FinalRangeVcselPulsePeriod_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_FinalRangeVcselPulsePeriod_set)
    __swig_setmethods__["PreRangeTimeoutMicroSecs"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PreRangeTimeoutMicroSecs_set
    __swig_getmethods__["PreRangeTimeoutMicroSecs"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PreRangeTimeoutMicroSecs_get
    if _newclass:
        PreRangeTimeoutMicroSecs = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PreRangeTimeoutMicroSecs_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PreRangeTimeoutMicroSecs_set)
    __swig_setmethods__["PreRangeVcselPulsePeriod"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PreRangeVcselPulsePeriod_set
    __swig_getmethods__["PreRangeVcselPulsePeriod"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PreRangeVcselPulsePeriod_get
    if _newclass:
        PreRangeVcselPulsePeriod = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PreRangeVcselPulsePeriod_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PreRangeVcselPulsePeriod_set)
    __swig_setmethods__["SigmaEstRefArray"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstRefArray_set
    __swig_getmethods__["SigmaEstRefArray"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstRefArray_get
    if _newclass:
        SigmaEstRefArray = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstRefArray_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstRefArray_set)
    __swig_setmethods__["SigmaEstEffPulseWidth"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstEffPulseWidth_set
    __swig_getmethods__["SigmaEstEffPulseWidth"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstEffPulseWidth_get
    if _newclass:
        SigmaEstEffPulseWidth = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstEffPulseWidth_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstEffPulseWidth_set)
    __swig_setmethods__["SigmaEstEffAmbWidth"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstEffAmbWidth_set
    __swig_getmethods__["SigmaEstEffAmbWidth"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstEffAmbWidth_get
    if _newclass:
        SigmaEstEffAmbWidth = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstEffAmbWidth_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SigmaEstEffAmbWidth_set)
    __swig_setmethods__["ReadDataFromDeviceDone"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReadDataFromDeviceDone_set
    __swig_getmethods__["ReadDataFromDeviceDone"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReadDataFromDeviceDone_get
    if _newclass:
        ReadDataFromDeviceDone = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReadDataFromDeviceDone_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReadDataFromDeviceDone_set)
    __swig_setmethods__["ModuleId"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ModuleId_set
    __swig_getmethods__["ModuleId"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ModuleId_get
    if _newclass:
        ModuleId = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ModuleId_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ModuleId_set)
    __swig_setmethods__["Revision"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_Revision_set
    __swig_getmethods__["Revision"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_Revision_get
    if _newclass:
        Revision = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_Revision_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_Revision_set)
    __swig_setmethods__["ProductId"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ProductId_set
    __swig_getmethods__["ProductId"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ProductId_get
    if _newclass:
        ProductId = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ProductId_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ProductId_set)
    __swig_setmethods__["ReferenceSpadCount"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReferenceSpadCount_set
    __swig_getmethods__["ReferenceSpadCount"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReferenceSpadCount_get
    if _newclass:
        ReferenceSpadCount = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReferenceSpadCount_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReferenceSpadCount_set)
    __swig_setmethods__["ReferenceSpadType"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReferenceSpadType_set
    __swig_getmethods__["ReferenceSpadType"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReferenceSpadType_get
    if _newclass:
        ReferenceSpadType = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReferenceSpadType_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_ReferenceSpadType_set)
    __swig_setmethods__["RefSpadsInitialised"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_RefSpadsInitialised_set
    __swig_getmethods__["RefSpadsInitialised"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_RefSpadsInitialised_get
    if _newclass:
        RefSpadsInitialised = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_RefSpadsInitialised_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_RefSpadsInitialised_set)
    __swig_setmethods__["PartUIDUpper"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PartUIDUpper_set
    __swig_getmethods__["PartUIDUpper"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PartUIDUpper_get
    if _newclass:
        PartUIDUpper = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PartUIDUpper_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PartUIDUpper_set)
    __swig_setmethods__["PartUIDLower"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PartUIDLower_set
    __swig_getmethods__["PartUIDLower"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PartUIDLower_get
    if _newclass:
        PartUIDLower = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PartUIDLower_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_PartUIDLower_set)
    __swig_setmethods__["SignalRateMeasFixed400mm"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SignalRateMeasFixed400mm_set
    __swig_getmethods__["SignalRateMeasFixed400mm"] = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SignalRateMeasFixed400mm_get
    if _newclass:
        SignalRateMeasFixed400mm = _swig_property(_rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SignalRateMeasFixed400mm_get, _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_SignalRateMeasFixed400mm_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_DeviceSpecificParameters_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_DeviceSpecificParameters_t
    __del__ = lambda self: None
VL53L0X_DeviceSpecificParameters_t_swigregister = _rpi_vl53l0x.VL53L0X_DeviceSpecificParameters_t_swigregister
VL53L0X_DeviceSpecificParameters_t_swigregister(VL53L0X_DeviceSpecificParameters_t)

class VL53L0X_DevData_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_DevData_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_DevData_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DMaxData"] = _rpi_vl53l0x.VL53L0X_DevData_t_DMaxData_set
    __swig_getmethods__["DMaxData"] = _rpi_vl53l0x.VL53L0X_DevData_t_DMaxData_get
    if _newclass:
        DMaxData = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_DMaxData_get, _rpi_vl53l0x.VL53L0X_DevData_t_DMaxData_set)
    __swig_setmethods__["Part2PartOffsetNVMMicroMeter"] = _rpi_vl53l0x.VL53L0X_DevData_t_Part2PartOffsetNVMMicroMeter_set
    __swig_getmethods__["Part2PartOffsetNVMMicroMeter"] = _rpi_vl53l0x.VL53L0X_DevData_t_Part2PartOffsetNVMMicroMeter_get
    if _newclass:
        Part2PartOffsetNVMMicroMeter = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_Part2PartOffsetNVMMicroMeter_get, _rpi_vl53l0x.VL53L0X_DevData_t_Part2PartOffsetNVMMicroMeter_set)
    __swig_setmethods__["Part2PartOffsetAdjustmentNVMMicroMeter"] = _rpi_vl53l0x.VL53L0X_DevData_t_Part2PartOffsetAdjustmentNVMMicroMeter_set
    __swig_getmethods__["Part2PartOffsetAdjustmentNVMMicroMeter"] = _rpi_vl53l0x.VL53L0X_DevData_t_Part2PartOffsetAdjustmentNVMMicroMeter_get
    if _newclass:
        Part2PartOffsetAdjustmentNVMMicroMeter = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_Part2PartOffsetAdjustmentNVMMicroMeter_get, _rpi_vl53l0x.VL53L0X_DevData_t_Part2PartOffsetAdjustmentNVMMicroMeter_set)
    __swig_setmethods__["CurrentParameters"] = _rpi_vl53l0x.VL53L0X_DevData_t_CurrentParameters_set
    __swig_getmethods__["CurrentParameters"] = _rpi_vl53l0x.VL53L0X_DevData_t_CurrentParameters_get
    if _newclass:
        CurrentParameters = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_CurrentParameters_get, _rpi_vl53l0x.VL53L0X_DevData_t_CurrentParameters_set)
    __swig_setmethods__["LastRangeMeasure"] = _rpi_vl53l0x.VL53L0X_DevData_t_LastRangeMeasure_set
    __swig_getmethods__["LastRangeMeasure"] = _rpi_vl53l0x.VL53L0X_DevData_t_LastRangeMeasure_get
    if _newclass:
        LastRangeMeasure = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_LastRangeMeasure_get, _rpi_vl53l0x.VL53L0X_DevData_t_LastRangeMeasure_set)
    __swig_setmethods__["LastHistogramMeasure"] = _rpi_vl53l0x.VL53L0X_DevData_t_LastHistogramMeasure_set
    __swig_getmethods__["LastHistogramMeasure"] = _rpi_vl53l0x.VL53L0X_DevData_t_LastHistogramMeasure_get
    if _newclass:
        LastHistogramMeasure = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_LastHistogramMeasure_get, _rpi_vl53l0x.VL53L0X_DevData_t_LastHistogramMeasure_set)
    __swig_setmethods__["DeviceSpecificParameters"] = _rpi_vl53l0x.VL53L0X_DevData_t_DeviceSpecificParameters_set
    __swig_getmethods__["DeviceSpecificParameters"] = _rpi_vl53l0x.VL53L0X_DevData_t_DeviceSpecificParameters_get
    if _newclass:
        DeviceSpecificParameters = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_DeviceSpecificParameters_get, _rpi_vl53l0x.VL53L0X_DevData_t_DeviceSpecificParameters_set)
    __swig_setmethods__["SpadData"] = _rpi_vl53l0x.VL53L0X_DevData_t_SpadData_set
    __swig_getmethods__["SpadData"] = _rpi_vl53l0x.VL53L0X_DevData_t_SpadData_get
    if _newclass:
        SpadData = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_SpadData_get, _rpi_vl53l0x.VL53L0X_DevData_t_SpadData_set)
    __swig_setmethods__["SequenceConfig"] = _rpi_vl53l0x.VL53L0X_DevData_t_SequenceConfig_set
    __swig_getmethods__["SequenceConfig"] = _rpi_vl53l0x.VL53L0X_DevData_t_SequenceConfig_get
    if _newclass:
        SequenceConfig = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_SequenceConfig_get, _rpi_vl53l0x.VL53L0X_DevData_t_SequenceConfig_set)
    __swig_setmethods__["RangeFractionalEnable"] = _rpi_vl53l0x.VL53L0X_DevData_t_RangeFractionalEnable_set
    __swig_getmethods__["RangeFractionalEnable"] = _rpi_vl53l0x.VL53L0X_DevData_t_RangeFractionalEnable_get
    if _newclass:
        RangeFractionalEnable = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_RangeFractionalEnable_get, _rpi_vl53l0x.VL53L0X_DevData_t_RangeFractionalEnable_set)
    __swig_setmethods__["PalState"] = _rpi_vl53l0x.VL53L0X_DevData_t_PalState_set
    __swig_getmethods__["PalState"] = _rpi_vl53l0x.VL53L0X_DevData_t_PalState_get
    if _newclass:
        PalState = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_PalState_get, _rpi_vl53l0x.VL53L0X_DevData_t_PalState_set)
    __swig_setmethods__["PowerMode"] = _rpi_vl53l0x.VL53L0X_DevData_t_PowerMode_set
    __swig_getmethods__["PowerMode"] = _rpi_vl53l0x.VL53L0X_DevData_t_PowerMode_get
    if _newclass:
        PowerMode = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_PowerMode_get, _rpi_vl53l0x.VL53L0X_DevData_t_PowerMode_set)
    __swig_setmethods__["SigmaEstRefArray"] = _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstRefArray_set
    __swig_getmethods__["SigmaEstRefArray"] = _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstRefArray_get
    if _newclass:
        SigmaEstRefArray = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstRefArray_get, _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstRefArray_set)
    __swig_setmethods__["SigmaEstEffPulseWidth"] = _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstEffPulseWidth_set
    __swig_getmethods__["SigmaEstEffPulseWidth"] = _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstEffPulseWidth_get
    if _newclass:
        SigmaEstEffPulseWidth = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstEffPulseWidth_get, _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstEffPulseWidth_set)
    __swig_setmethods__["SigmaEstEffAmbWidth"] = _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstEffAmbWidth_set
    __swig_getmethods__["SigmaEstEffAmbWidth"] = _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstEffAmbWidth_get
    if _newclass:
        SigmaEstEffAmbWidth = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstEffAmbWidth_get, _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstEffAmbWidth_set)
    __swig_setmethods__["StopVariable"] = _rpi_vl53l0x.VL53L0X_DevData_t_StopVariable_set
    __swig_getmethods__["StopVariable"] = _rpi_vl53l0x.VL53L0X_DevData_t_StopVariable_get
    if _newclass:
        StopVariable = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_StopVariable_get, _rpi_vl53l0x.VL53L0X_DevData_t_StopVariable_set)
    __swig_setmethods__["targetRefRate"] = _rpi_vl53l0x.VL53L0X_DevData_t_targetRefRate_set
    __swig_getmethods__["targetRefRate"] = _rpi_vl53l0x.VL53L0X_DevData_t_targetRefRate_get
    if _newclass:
        targetRefRate = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_targetRefRate_get, _rpi_vl53l0x.VL53L0X_DevData_t_targetRefRate_set)
    __swig_setmethods__["SigmaEstimate"] = _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstimate_set
    __swig_getmethods__["SigmaEstimate"] = _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstimate_get
    if _newclass:
        SigmaEstimate = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstimate_get, _rpi_vl53l0x.VL53L0X_DevData_t_SigmaEstimate_set)
    __swig_setmethods__["SignalEstimate"] = _rpi_vl53l0x.VL53L0X_DevData_t_SignalEstimate_set
    __swig_getmethods__["SignalEstimate"] = _rpi_vl53l0x.VL53L0X_DevData_t_SignalEstimate_get
    if _newclass:
        SignalEstimate = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_SignalEstimate_get, _rpi_vl53l0x.VL53L0X_DevData_t_SignalEstimate_set)
    __swig_setmethods__["LastSignalRefMcps"] = _rpi_vl53l0x.VL53L0X_DevData_t_LastSignalRefMcps_set
    __swig_getmethods__["LastSignalRefMcps"] = _rpi_vl53l0x.VL53L0X_DevData_t_LastSignalRefMcps_get
    if _newclass:
        LastSignalRefMcps = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_LastSignalRefMcps_get, _rpi_vl53l0x.VL53L0X_DevData_t_LastSignalRefMcps_set)
    __swig_setmethods__["pTuningSettingsPointer"] = _rpi_vl53l0x.VL53L0X_DevData_t_pTuningSettingsPointer_set
    __swig_getmethods__["pTuningSettingsPointer"] = _rpi_vl53l0x.VL53L0X_DevData_t_pTuningSettingsPointer_get
    if _newclass:
        pTuningSettingsPointer = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_pTuningSettingsPointer_get, _rpi_vl53l0x.VL53L0X_DevData_t_pTuningSettingsPointer_set)
    __swig_setmethods__["UseInternalTuningSettings"] = _rpi_vl53l0x.VL53L0X_DevData_t_UseInternalTuningSettings_set
    __swig_getmethods__["UseInternalTuningSettings"] = _rpi_vl53l0x.VL53L0X_DevData_t_UseInternalTuningSettings_get
    if _newclass:
        UseInternalTuningSettings = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_UseInternalTuningSettings_get, _rpi_vl53l0x.VL53L0X_DevData_t_UseInternalTuningSettings_set)
    __swig_setmethods__["LinearityCorrectiveGain"] = _rpi_vl53l0x.VL53L0X_DevData_t_LinearityCorrectiveGain_set
    __swig_getmethods__["LinearityCorrectiveGain"] = _rpi_vl53l0x.VL53L0X_DevData_t_LinearityCorrectiveGain_get
    if _newclass:
        LinearityCorrectiveGain = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_LinearityCorrectiveGain_get, _rpi_vl53l0x.VL53L0X_DevData_t_LinearityCorrectiveGain_set)
    __swig_setmethods__["DmaxCalRangeMilliMeter"] = _rpi_vl53l0x.VL53L0X_DevData_t_DmaxCalRangeMilliMeter_set
    __swig_getmethods__["DmaxCalRangeMilliMeter"] = _rpi_vl53l0x.VL53L0X_DevData_t_DmaxCalRangeMilliMeter_get
    if _newclass:
        DmaxCalRangeMilliMeter = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_DmaxCalRangeMilliMeter_get, _rpi_vl53l0x.VL53L0X_DevData_t_DmaxCalRangeMilliMeter_set)
    __swig_setmethods__["DmaxCalSignalRateRtnMegaCps"] = _rpi_vl53l0x.VL53L0X_DevData_t_DmaxCalSignalRateRtnMegaCps_set
    __swig_getmethods__["DmaxCalSignalRateRtnMegaCps"] = _rpi_vl53l0x.VL53L0X_DevData_t_DmaxCalSignalRateRtnMegaCps_get
    if _newclass:
        DmaxCalSignalRateRtnMegaCps = _swig_property(_rpi_vl53l0x.VL53L0X_DevData_t_DmaxCalSignalRateRtnMegaCps_get, _rpi_vl53l0x.VL53L0X_DevData_t_DmaxCalSignalRateRtnMegaCps_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_DevData_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_DevData_t
    __del__ = lambda self: None
VL53L0X_DevData_t_swigregister = _rpi_vl53l0x.VL53L0X_DevData_t_swigregister
VL53L0X_DevData_t_swigregister(VL53L0X_DevData_t)

class VL53L0X_SchedulerSequenceSteps_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_SchedulerSequenceSteps_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_SchedulerSequenceSteps_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TccOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_TccOn_set
    __swig_getmethods__["TccOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_TccOn_get
    if _newclass:
        TccOn = _swig_property(_rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_TccOn_get, _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_TccOn_set)
    __swig_setmethods__["MsrcOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_MsrcOn_set
    __swig_getmethods__["MsrcOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_MsrcOn_get
    if _newclass:
        MsrcOn = _swig_property(_rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_MsrcOn_get, _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_MsrcOn_set)
    __swig_setmethods__["DssOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_DssOn_set
    __swig_getmethods__["DssOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_DssOn_get
    if _newclass:
        DssOn = _swig_property(_rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_DssOn_get, _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_DssOn_set)
    __swig_setmethods__["PreRangeOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_PreRangeOn_set
    __swig_getmethods__["PreRangeOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_PreRangeOn_get
    if _newclass:
        PreRangeOn = _swig_property(_rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_PreRangeOn_get, _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_PreRangeOn_set)
    __swig_setmethods__["FinalRangeOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_FinalRangeOn_set
    __swig_getmethods__["FinalRangeOn"] = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_FinalRangeOn_get
    if _newclass:
        FinalRangeOn = _swig_property(_rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_FinalRangeOn_get, _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_FinalRangeOn_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_SchedulerSequenceSteps_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_SchedulerSequenceSteps_t
    __del__ = lambda self: None
VL53L0X_SchedulerSequenceSteps_t_swigregister = _rpi_vl53l0x.VL53L0X_SchedulerSequenceSteps_t_swigregister
VL53L0X_SchedulerSequenceSteps_t_swigregister(VL53L0X_SchedulerSequenceSteps_t)

VL53L0X_SEQUENCESTEP_TCC = _rpi_vl53l0x.VL53L0X_SEQUENCESTEP_TCC
VL53L0X_SEQUENCESTEP_DSS = _rpi_vl53l0x.VL53L0X_SEQUENCESTEP_DSS
VL53L0X_SEQUENCESTEP_MSRC = _rpi_vl53l0x.VL53L0X_SEQUENCESTEP_MSRC
VL53L0X_SEQUENCESTEP_PRE_RANGE = _rpi_vl53l0x.VL53L0X_SEQUENCESTEP_PRE_RANGE
VL53L0X_SEQUENCESTEP_FINAL_RANGE = _rpi_vl53l0x.VL53L0X_SEQUENCESTEP_FINAL_RANGE
VL53L0X_SEQUENCESTEP_NUMBER_OF_CHECKS = _rpi_vl53l0x.VL53L0X_SEQUENCESTEP_NUMBER_OF_CHECKS

def VL53L0X_i2c_init(devPath, devAddr):
    return _rpi_vl53l0x.VL53L0X_i2c_init(devPath, devAddr)
VL53L0X_i2c_init = _rpi_vl53l0x.VL53L0X_i2c_init

def VL53L0X_i2c_close():
    return _rpi_vl53l0x.VL53L0X_i2c_close()
VL53L0X_i2c_close = _rpi_vl53l0x.VL53L0X_i2c_close
class VL53L0X_Dev_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL53L0X_Dev_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL53L0X_Dev_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Data"] = _rpi_vl53l0x.VL53L0X_Dev_t_Data_set
    __swig_getmethods__["Data"] = _rpi_vl53l0x.VL53L0X_Dev_t_Data_get
    if _newclass:
        Data = _swig_property(_rpi_vl53l0x.VL53L0X_Dev_t_Data_get, _rpi_vl53l0x.VL53L0X_Dev_t_Data_set)
    __swig_setmethods__["I2cDevAddr"] = _rpi_vl53l0x.VL53L0X_Dev_t_I2cDevAddr_set
    __swig_getmethods__["I2cDevAddr"] = _rpi_vl53l0x.VL53L0X_Dev_t_I2cDevAddr_get
    if _newclass:
        I2cDevAddr = _swig_property(_rpi_vl53l0x.VL53L0X_Dev_t_I2cDevAddr_get, _rpi_vl53l0x.VL53L0X_Dev_t_I2cDevAddr_set)
    __swig_setmethods__["comms_type"] = _rpi_vl53l0x.VL53L0X_Dev_t_comms_type_set
    __swig_getmethods__["comms_type"] = _rpi_vl53l0x.VL53L0X_Dev_t_comms_type_get
    if _newclass:
        comms_type = _swig_property(_rpi_vl53l0x.VL53L0X_Dev_t_comms_type_get, _rpi_vl53l0x.VL53L0X_Dev_t_comms_type_set)
    __swig_setmethods__["comms_speed_khz"] = _rpi_vl53l0x.VL53L0X_Dev_t_comms_speed_khz_set
    __swig_getmethods__["comms_speed_khz"] = _rpi_vl53l0x.VL53L0X_Dev_t_comms_speed_khz_get
    if _newclass:
        comms_speed_khz = _swig_property(_rpi_vl53l0x.VL53L0X_Dev_t_comms_speed_khz_get, _rpi_vl53l0x.VL53L0X_Dev_t_comms_speed_khz_set)
    __swig_setmethods__["fd"] = _rpi_vl53l0x.VL53L0X_Dev_t_fd_set
    __swig_getmethods__["fd"] = _rpi_vl53l0x.VL53L0X_Dev_t_fd_get
    if _newclass:
        fd = _swig_property(_rpi_vl53l0x.VL53L0X_Dev_t_fd_get, _rpi_vl53l0x.VL53L0X_Dev_t_fd_set)

    def __init__(self):
        this = _rpi_vl53l0x.new_VL53L0X_Dev_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rpi_vl53l0x.delete_VL53L0X_Dev_t
    __del__ = lambda self: None
VL53L0X_Dev_t_swigregister = _rpi_vl53l0x.VL53L0X_Dev_t_swigregister
VL53L0X_Dev_t_swigregister(VL53L0X_Dev_t)


def VL53L0X_LockSequenceAccess(Dev):
    return _rpi_vl53l0x.VL53L0X_LockSequenceAccess(Dev)
VL53L0X_LockSequenceAccess = _rpi_vl53l0x.VL53L0X_LockSequenceAccess

def VL53L0X_UnlockSequenceAccess(Dev):
    return _rpi_vl53l0x.VL53L0X_UnlockSequenceAccess(Dev)
VL53L0X_UnlockSequenceAccess = _rpi_vl53l0x.VL53L0X_UnlockSequenceAccess

def VL53L0X_WriteMulti(Dev, index, pdata, count):
    return _rpi_vl53l0x.VL53L0X_WriteMulti(Dev, index, pdata, count)
VL53L0X_WriteMulti = _rpi_vl53l0x.VL53L0X_WriteMulti

def VL53L0X_ReadMulti(Dev, index, pdata, count):
    return _rpi_vl53l0x.VL53L0X_ReadMulti(Dev, index, pdata, count)
VL53L0X_ReadMulti = _rpi_vl53l0x.VL53L0X_ReadMulti

def VL53L0X_WrByte(Dev, index, data):
    return _rpi_vl53l0x.VL53L0X_WrByte(Dev, index, data)
VL53L0X_WrByte = _rpi_vl53l0x.VL53L0X_WrByte

def VL53L0X_WrWord(Dev, index, data):
    return _rpi_vl53l0x.VL53L0X_WrWord(Dev, index, data)
VL53L0X_WrWord = _rpi_vl53l0x.VL53L0X_WrWord

def VL53L0X_WrDWord(Dev, index, data):
    return _rpi_vl53l0x.VL53L0X_WrDWord(Dev, index, data)
VL53L0X_WrDWord = _rpi_vl53l0x.VL53L0X_WrDWord

def VL53L0X_RdByte(Dev, index, data):
    return _rpi_vl53l0x.VL53L0X_RdByte(Dev, index, data)
VL53L0X_RdByte = _rpi_vl53l0x.VL53L0X_RdByte

def VL53L0X_RdWord(Dev, index, data):
    return _rpi_vl53l0x.VL53L0X_RdWord(Dev, index, data)
VL53L0X_RdWord = _rpi_vl53l0x.VL53L0X_RdWord

def VL53L0X_RdDWord(Dev, index, data):
    return _rpi_vl53l0x.VL53L0X_RdDWord(Dev, index, data)
VL53L0X_RdDWord = _rpi_vl53l0x.VL53L0X_RdDWord

def VL53L0X_UpdateByte(Dev, index, AndData, OrData):
    return _rpi_vl53l0x.VL53L0X_UpdateByte(Dev, index, AndData, OrData)
VL53L0X_UpdateByte = _rpi_vl53l0x.VL53L0X_UpdateByte

def VL53L0X_PollingDelay(Dev):
    return _rpi_vl53l0x.VL53L0X_PollingDelay(Dev)
VL53L0X_PollingDelay = _rpi_vl53l0x.VL53L0X_PollingDelay
# This file is compatible with both classic and new-style classes.


